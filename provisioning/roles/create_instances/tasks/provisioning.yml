#For executing this playbook we need to export the AWS credentials, see example below:
#export AWS_ACCESS_KEY_ID='AK123'
#export AWS_SECRET_ACCESS_KEY='abc123'

- name: Criando Security Group
  local_action:
    module: ec2_group
    name: "{{ sec_group_name }}"
    description: "{{ sec_group_description }}"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
      rule_desc: SSH
    - proto: tcp
      from_port: 2379
      to_port: 2380
      cidr_ip: 0.0.0.0/0
      rule_desc: etcd server API
    - proto: tcp
      from_port: 6443
      to_port: 6443
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-apiserver
    - proto: tcp
      from_port: 10250
      to_port: 10250
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API
    - proto: tcp
      from_port: 10251
      to_port: 10251
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-scheduler
    - proto: tcp
      from_port: 10252
      to_port: 10252
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-controller-manager
    - proto: tcp
      from_port: 10255
      to_port: 10255
      cidr_ip: 0.0.0.0/0
      rule_desc: Kubelet API Read-only
    - proto: tcp
      from_port: 30000
      to_port: 32767
      cidr_ip: 0.0.0.0/0
      rule_desc: NodePort Services
    - proto: tcp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: WeaveNet
    - proto: udp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    - proto: udp
      from_port: 6784
      to_port: 6784
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Criando EC2 Instace
  local_action:
    module: ec2
    group: "{{ sec_group_name }}"
    instance_type: "{{ instace_type }}"
    image: "{{ image }}"
    wait: true
    region: "{{ region }}"
    keypair: "{{ keypair }}"
    count: "{{ count }}"
  register: ec2

- name: Adicionando intância ao inventário temporário
  add_host: 
    name: "{{ item.public_ip }}"
    groups: "temp_group"
  with_items: "{{ ec2.instances  }}"

- name: Adicionando instância ao inventário de hosts
  local_action:
    module: lineinfile
    dest: "./hosts"
    regexp: "{{ item.public_ip }}"
    insertafter: "[kubernetes]" 
    line: "{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}"

- name: Adicionando IP Privado ao inventário de hosts
  local_action: 
    module: lineinfile
    dest: "./hosts"
    regexp: "{{ item.private_ip }}"
    insertafter: "[kubernetes]" 
    line: "{{ item.private_ip }}"
  with_items: "{{ ec2.instances }}"

- name: Esperando conexão SSH
  local_action: 
    module: wait_for
    host: "{{ item.public_ip }}"
    port: 22
    state:  started
  with_items: "{{ ec2.instances }}"

- name: Adicionando tag na instância
  local_action:
    module: ec2_tag
    resource: "{{ item.id }}"
    region: "{{ region }}"
    state: present
  with_items: "{{ ec2.instances }}"
  args:
    tags:
      Name: ansible-"{{ item.ami_launch_index | int + 1}}"
    